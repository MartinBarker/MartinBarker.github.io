{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","videoSrc","setVideoSrc","useState","message","setMessage","audioFiles","setAudioFiles","imageFiles","setImageFiles","ffmpegLoaded","setFfmpegLoaded","ffmpeg","React","useMemo","createFFmpeg","log","loadFfmpeg","useCallback","async","load","err","console","error","renderVideo","length","audioFile","imageFile","FS","fetchFile","URL","createObjectURL","command","join","run","data","Blob","buffer","type","createElement","className","multiple","onChange","event","files","Array","from","target","audio","filter","file","startsWith","images","map","index","key","name","src","controls","onClick","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d0cd55f1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\nimport './App.css';\n\nfunction App() {\n  const [videoSrc, setVideoSrc] = useState('');\n  const [message, setMessage] = useState('Click Load to load ffmpeg');\n  const [audioFiles, setAudioFiles] = useState([]);\n  const [imageFiles, setImageFiles] = useState([]);\n  const [ffmpegLoaded, setFfmpegLoaded] = useState(false);\n  const ffmpeg = React.useMemo(() => createFFmpeg({ log: true }), []);\n\n  const handleFileChange = (event) => {\n    const files = Array.from(event.target.files);\n    const audio = files.filter(file => file.type.startsWith('audio/'));\n    const images = files.filter(file => file.type.startsWith('image/'));\n    setAudioFiles(audio);\n    setImageFiles(images);\n  };\n\n  const loadFfmpeg = React.useCallback(async () => {\n    if (!ffmpegLoaded) {\n        try {\n            setMessage('Loading ffmpeg-core.js');\n            await ffmpeg.load();\n            setFfmpegLoaded(true);\n            setMessage('ffmpeg loaded. Now you can render the video.');\n        } catch (err) {\n            setMessage('Failed to load ffmpeg');\n            console.error(err);\n        }\n    }\n}, [ffmpeg, ffmpegLoaded]);\n\nconst renderVideo = React.useCallback(async () => {\n  if (!ffmpegLoaded) {\n      setMessage('Please load ffmpeg first.');\n      return;\n  }\n\n  if (audioFiles.length === 0 || imageFiles.length === 0) {\n      setMessage('Please select at least one audio and one image file.');\n      return;\n  }\n\n  try {\n      setMessage('Start rendering video');\n      const audioFile = audioFiles[0];\n      const imageFile = imageFiles[0];\n\n      ffmpeg.FS('writeFile', 'audio.mp3', await fetchFile(URL.createObjectURL(audioFile)));\n      ffmpeg.FS('writeFile', 'image.jpg', await fetchFile(URL.createObjectURL(imageFile)));\n\n      const command = ['-loop', '1', '-framerate', '2', '-i', 'image.jpg', '-i', 'audio.mp3', '-c:v', 'libx264', '-preset', 'slow', '-tune', 'stillimage', '-crf', '18', '-c:a', 'aac', '-b:a', '192k', '-shortest', 'output.mp4'];\n      console.log('Running ffmpeg command:', command.join(' '));\n\n      await ffmpeg.run(...command);\n\n      setMessage('Complete rendering video');\n      const data = ffmpeg.FS('readFile', 'output.mp4');\n      setVideoSrc(URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' })));\n  } catch (err) {\n      setMessage('Error rendering video');\n      console.error(err);\n  }\n}, [ffmpeg, ffmpegLoaded, audioFiles, imageFiles]);\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Welcome to My Video Rendering Site</h1>\n        <p>This site allows you to render videos using audio and image files.</p>\n        <p>Created by Martin Barker. This site is a work in progress.</p>\n      </header>\n      <input type=\"file\" multiple onChange={handleFileChange} />\n      <div>\n        <h3>Audio Files</h3>\n        <table>\n          <tbody>\n            {audioFiles.map((file, index) => (\n              <tr key={index}>\n                <td>{file.name}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      <div>\n        <h3>Image Files</h3>\n        <table>\n          <tbody>\n            {imageFiles.map((file, index) => (\n              <tr key={index}>\n                <td>{file.name}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      <video src={videoSrc} controls></video><br/>\n      <button onClick={loadFfmpeg} disabled={ffmpegLoaded}>Load ffmpeg</button>\n      <button onClick={renderVideo}>Render Video</button>\n      <p>{message}</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}