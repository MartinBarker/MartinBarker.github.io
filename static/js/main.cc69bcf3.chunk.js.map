{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","videoSrc","setVideoSrc","useState","message","setMessage","ffmpegLoaded","setFfmpegLoaded","file","setFile","ffmpeg","React","useMemo","createFFmpeg","log","loadFfmpeg","useCallback","async","load","err","console","error","runCommand","inputDir","FS","files","inputFile","concat","name","outputFile","args","run","data","URL","createObjectURL","Blob","buffer","type","createElement","className","onChange","event","target","onClick","disabled","src","controls","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"uNAgFeA,MA5Ef,WACE,MAAOC,EAAUC,GAAeC,mBAAS,KAClCC,EAASC,GAAcF,mBAAS,8BAChCG,EAAcC,GAAmBJ,oBAAS,IAC1CK,EAAMC,GAAWN,mBAAS,MAC3BO,EAASC,IAAMC,QAAQ,IAAMC,uBAAa,CAAEC,KAAK,IAAS,IAO1DC,EAAaJ,IAAMK,YAAYC,UACnC,IAAKX,EACD,IACID,EAAW,gCACLK,EAAOQ,OACbX,GAAgB,GAChBF,EAAW,4CACb,MAAOc,GACLd,EAAW,yBACXe,QAAQC,MAAMF,KAGrB,CAACT,EAAQJ,IAENgB,EAAaX,IAAMK,YAAYC,UACnC,GAAKX,EAKL,GAAKE,EAKL,IACIH,EAAW,yBACX,MAAMkB,EAAW,eACXb,EAAOc,GAAG,QAASD,SACnBb,EAAOc,GAAG,QAAS,WAAY,CAAEC,MAAO,CAACjB,IAASe,GACxD,MAAMG,EAAS,GAAAC,OAAMJ,EAAQ,KAAAI,OAAInB,EAAKoB,MAChCC,EAAa,cAEbC,EAAO,CAAC,KAAMJ,EAAW,KAAM,OAAQG,SACvCnB,EAAOqB,OAAOD,GAEpB,MAAME,EAAOtB,EAAOc,GAAG,WAAYK,GACnC3B,EAAY+B,IAAIC,gBAAgB,IAAIC,KAAK,CAACH,EAAKI,QAAS,CAAEC,KAAM,gBAChEhC,EAAW,6BAGLK,EAAOc,GAAG,UAAWD,SACrBb,EAAOc,GAAG,SAAUE,SACpBhB,EAAOc,GAAG,SAAUK,GAC5B,MAAOV,GACLd,EAAW,0BACXe,QAAQC,MAAMF,QAzBdd,EAAW,oCALXA,EAAW,8BAgCd,CAACK,EAAQJ,EAAcE,IAE1B,OACEG,IAAA2B,cAAA,OAAKC,UAAU,OACb5B,IAAA2B,cAAA,cACE3B,IAAA2B,cAAA,UAAI,oBAEN3B,IAAA2B,cAAA,SAAOD,KAAK,OAAOG,SA5DGC,IACxB,MAAMjC,EAAOiC,EAAMC,OAAOjB,MAAM,GAC5BjB,GAAMC,EAAQD,MA2DhBG,IAAA2B,cAAA,UAAQK,QAAS5B,EAAY6B,SAAUtC,GAAc,eACrDK,IAAA2B,cAAA,UAAQK,QAASrB,GAAY,iBAC7BX,IAAA2B,cAAA,SAAOO,IAAK5C,EAAU6C,UAAQ,IAC9BnC,IAAA2B,cAAA,SAAIlC,KC/DU2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP1C,IAAA2B,cAAC3B,IAAM2C,WAAU,KACf3C,IAAA2B,cAACtC,EAAG,OAENuD,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAKC,IACJA,EAAaC,eAEdC,MAAM1C,IACLD,QAAQC,MAAMA,EAAMjB,Y","file":"static/js/main.cc69bcf3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\nimport './App.css';\n\nfunction App() {\n  const [videoSrc, setVideoSrc] = useState('');\n  const [message, setMessage] = useState('Click Load to load ffmpeg');\n  const [ffmpegLoaded, setFfmpegLoaded] = useState(false);\n  const [file, setFile] = useState(null);\n  const ffmpeg = React.useMemo(() => createFFmpeg({ log: true }), []);\n\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    if (file) setFile(file);\n  };\n\n  const loadFfmpeg = React.useCallback(async () => {\n    if (!ffmpegLoaded) {\n        try {\n            setMessage('Loading ffmpeg-core.js');\n            await ffmpeg.load();\n            setFfmpegLoaded(true);\n            setMessage('ffmpeg loaded. Now you can run commands.');\n        } catch (err) {\n            setMessage('Failed to load ffmpeg');\n            console.error(err);\n        }\n    }\n  }, [ffmpeg, ffmpegLoaded]);\n\n  const runCommand = React.useCallback(async () => {\n    if (!ffmpegLoaded) {\n        setMessage('Please load ffmpeg first.');\n        return;\n    }\n\n    if (!file) {\n        setMessage('Please select a file first.');\n        return;\n    }\n\n    try {\n        setMessage('Processing video file');\n        const inputDir = '/input';\n        await ffmpeg.FS('mkdir', inputDir);\n        await ffmpeg.FS('mount', 'WORKERFS', { files: [file] }, inputDir);\n        const inputFile = `${inputDir}/${file.name}`;\n        const outputFile = '/output.mp4';\n\n        const args = ['-i', inputFile, '-c', 'copy', outputFile];\n        await ffmpeg.run(...args);\n\n        const data = ffmpeg.FS('readFile', outputFile);\n        setVideoSrc(URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' })));\n        setMessage('Processing complete');\n        \n        // Clean up\n        await ffmpeg.FS('unmount', inputDir);\n        await ffmpeg.FS('unlink', inputFile);\n        await ffmpeg.FS('unlink', outputFile);\n    } catch (err) {\n        setMessage('Error processing video');\n        console.error(err);\n    }\n  }, [ffmpeg, ffmpegLoaded, file]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Video Processor</h1>\n      </header>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button onClick={loadFfmpeg} disabled={ffmpegLoaded}>Load ffmpeg</button>\n      <button onClick={runCommand}>Process Video</button>\n      <video src={videoSrc} controls></video>\n      <p>{message}</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}